-- Explore all the Objects in the Database.
Select * from information_schema.tables;

-- Explore all the Columns in DataBase.
Select * from information_schema.columns;

-- Explore all country our customers come from.
SELECT DISTINCT country from gold.dim_customers;

-- Explore all the Categories 'The major Division'.
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products;


-- Find the date of the first and last order.
SELECT 
	max(order_date) ,
    min(order_date),
    timestampdiff(month,min(order_date),max(order_date)) as order_range_months
from gold.fact_sales;

-- Results: The first order was on 2010-12-29 and the last order was 2014-01-28.

-- Find the youngest and oldest customers.
SELECT 
	max(timestampdiff(year, birthdate,now())) as oldest_customer,
    min(timestampdiff(year, birthdate,now())) as youngest_customer
FROM gold.dim_customers;

-- ======================
-- Measure calculations.
-- ======================


-- 1. Find the total Sales.
SELECT sum(sales_amount)
from gold.fact_sales;

-- 2. Find how many items are sold.
SELECT sum(quantity) 
from gold.fact_sales;

-- 3. Find the average selling price.
SELECT AVG(sales_amount)
from gold.fact_sales;

-- 4. Find the total no of orders.
Select 
Count(DISTINCT order_number) 
from gold.fact_sales;

-- 5. Find the total no of products.
Select 
Count(DISTINCT product_id) 
from gold.dim_products;

-- 6. Find the total no of customers.
SELECT count(customer_id) from gold.dim_customers;

-- 7. Find the total no of customers that have placed an order.
SELECT count( DISTINCT customer_key) from gold.fact_sales;

-- Generate the Report that shows all the key metrics of the business.
SELECT 'Total Sales ' as Measure_Name, sum(sales_amount) as MeasureValues from gold.fact_sales
UNION ALL 
SELECT 'Total quantities ' as Measure_Name, sum(quantity) from gold.fact_sales
UNION ALL
SELECT 'Average Price ' as Measure_Name, AVG(sales_amount) from gold.fact_sales
UNION ALL 
SELECT 'Total orders ' as Measure_Name, Count(DISTINCT order_number) from gold.fact_sales
UNION ALL 
SELECT 'Total products ' as Measure_Name, Count(DISTINCT product_id) from gold.dim_products
UNION ALL 
SELECT 'Total Customers ' as Measure_Name, count(customer_id) from gold.dim_customers
UNION ALL 
SELECT 'Total order placed Customers ' as Measure_Name, count( DISTINCT customer_key) from gold.fact_sales;

-- Magnitude Measures
-- 1. Find the total customers by countries.
SELECT 
	country,
	count(DISTINCT customer_id) as Total_Customers
FROM gold.dim_customers
group by country;

-- 2. Find the total customer by gender.
SELECT 
	gender,
	count(DISTINCT customer_id) as Total_Customers
FROM gold.dim_customers
group by gender;

-- 3. Find total products by category.
Select 
	category,
    count(Distinct product_id) as products
from gold.dim_products
group by category;

-- 4. what is the average costs in each category.
Select 
	category,
    AVG(cost) as AVG_COST_CATEGORY
from gold.dim_products
group by category;

-- 5. what is the total revenue generated for each categories.
Select 
	p.category,
    sum(s.sales_amount) as total_sales
from gold.fact_sales s
LEFT JOIN gold.dim_products as p 
ON p.product_key = s.product_key
group by p.category;

-- 6. what is the total revenue generated by each customers.
SELECT 
	c.customer_key,
  concat(  c.first_name,' ' ,c.last_name) as FULL_NAME,
  SUM(f.sales_amount) as Total_revenue
FROM gold.fact_sales f 
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
group by c.customer_key,concat(  c.first_name,' ' ,c.last_name);

-- 7. what is the distribution of sold items across countries. 

-- TYPE 1 percentage across countries of product items.
SELECT 
  p.product_name,
  c.country,
  100.0 * SUM(s.sales_amount) / SUM(SUM(s.sales_amount)) OVER (PARTITION BY p.product_name) AS perc_dist
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p ON p.product_key = s.product_key
LEFT JOIN gold.dim_customers c ON c.customer_key = s.customer_key
GROUP BY p.product_name, c.country;

-- TYPE 2 Sales distribution across country based on quantity.
Select 
	c.country,
    sum(f.quantity) as total_sold_items
from gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key 
group by c.country
order by total_sold_items DESC;

-- RANK ANALYSIS.
-- 1. Which 5 products generate the highest revenue?
Select 
	p.product_name,
    sum(s.sales_amount) as total_sales
from gold.fact_sales s
LEFT JOIN gold.dim_products as p 
ON p.product_key = s.product_key
group by p.product_name
Order by total_sales DESC
limit 5;

-- 2. Which are the 5 worst-performing products in terms of sales?
-- TYPE 1
Select 
	p.product_name,
    sum(s.sales_amount) as total_sales
from gold.fact_sales s
LEFT JOIN gold.dim_products as p 
ON p.product_key = s.product_key
group by p.product_name
Order by total_sales ASC
limit 5;

-- TYPE 2
SELECT * FROM
(
Select 
	p.product_name,
    sum(s.sales_amount) as total_sales,
    ROW_NUMBER() OVER(order by sum(s.sales_amount) DESC ) as RANK_product
from gold.fact_sales s
LEFT JOIN gold.dim_products as p 
ON p.product_key = s.product_key
group by p.product_name
)t where RANK_product <=5;

-- Find the Top-10 customers who have generated the highest revenue 
SELECT 
	c.customer_key,
  concat(  c.first_name,' ' ,c.last_name) as FULL_NAME,
  SUM(f.sales_amount) as Total_revenue
FROM gold.fact_sales f 
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
group by c.customer_key,concat(  c.first_name,' ' ,c.last_name)
order by Total_revenue DESC
limit 10;


-- And 3 Customers with the fewest orders placed.
SELECT 
	c.customer_key,
    concat(  c.first_name,' ' ,c.last_name) as FULL_NAME,
    count(DISTINCT f.order_number) as total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
group by c.customer_key,concat(  c.first_name,' ' ,c.last_name)
order by total_orders ASC
limit 3;
